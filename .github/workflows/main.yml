name: CI

on:
  push:
    branches:
      - 'master'
      - 'dev'
  pull_request:
  release:
    types: [published]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setVersion.outputs.environment }}
      version: ${{ steps.setVersion.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install poetry
        uses: Gr1N/setup-poetry@v7
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
      - name: Install prerequisites
        run: |
          poetry install
          poetry run playwright install chromium
      - name: Run tests
        run: poetry run pytest --cov=src --cov-report xml --junitxml=TEST-pytest.xml -n auto
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results
          path: |
            **/TEST-*.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
      - name: Set build version
        id: setVersion
        run: |
          VERSION=$(poetry version -s)
          COMMIT_ID=$(git rev-parse --short HEAD)
          if [[ "${{github.event_name}}" == "release" && "${{github.event.action}}" == "published" ]]; then
            echo "::set-output name=environment::prod"
            echo "::set-output name=version::$VERSION"
          else
            echo "::set-output name=environment::dev"
            echo "::set-output name=version::$VERSION-git.$COMMIT_ID"
          fi

  event_file:
    name: Event File
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: Event File
        path: ${{ github.event_path }}

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set version
        run: |
          sed -ri "s#SENTRY_RELEASE=version#SENTRY_RELEASE=$VERSION#g" Dockerfile
        env:
          VERSION: ${{ needs.test.outputs.version }}
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: he0119/coolqbot
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  deploy_dev:
    name: Deploy Dev
    runs-on: ubuntu-latest
    environment: dev
    needs: docker
    if: ${{ github.ref == 'refs/heads/dev' }}
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: TAG_NAME
          script: |
            cd coolqbot/dev
            sed -i "s#he0119/coolqbot:.*#he0119/coolqbot:dev#g" docker-compose.yml
            sudo docker-compose pull
            sudo docker-compose down
            sudo docker-compose up -d

  deploy_prod:
    name: Deploy Prod
    runs-on: ubuntu-latest
    environment: prod
    needs: docker
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: TAG_NAME
          script: |
            cd coolqbot/prod
            sed -i "s#he0119/coolqbot:.*#he0119/coolqbot:$TAG_NAME#g" docker-compose.yml
            sudo docker-compose pull
            sudo docker-compose down
            sudo docker-compose up -d

  sentry_release:
    name: Sentry Release
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: ${{ needs.test.outputs.environment }}
          version: ${{ needs.test.outputs.version }}
