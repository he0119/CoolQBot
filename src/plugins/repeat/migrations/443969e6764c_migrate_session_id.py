"""migrate_session_id

迁移 ID: 443969e6764c
父迁移: 6894055fff61
创建时间: 2025-08-09 11:04:26.866126

"""

from __future__ import annotations

from datetime import UTC, datetime
from typing import TYPE_CHECKING

from alembic import op
from nonebot import logger
from sqlalchemy import select
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session

if TYPE_CHECKING:
    from collections.abc import Sequence


revision: str = "443969e6764c"
down_revision: str | Sequence[str] | None = "6894055fff61"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None

MAPPING = {
    "console": "Console",
    "discord": "Discord",
    "dodo": "DoDo",
    "feishu": "Feishu",
    "kaiheila": "Kaiheila",
    "qq": "QQClient",
    "qqguild": "QQAPI",
    "telegram": "Telegram",
    "unknown": "Unknown",
}


def to_uninfo_platform(platform: str, group_id: str) -> str:
    if platform == "qq":
        if group_id and group_id.isdigit():
            platform = "QQClient"
        else:
            platform = "QQAPI"
    else:
        platform = MAPPING.get(platform, "Unknown")

    return platform


def get_session_id(platform: str, group_id: str, guild_id: str, channel_id: str) -> str | None:
    """生成会话 ID"""
    if group_id:
        return f"{platform}_{group_id}"
    if guild_id and channel_id:
        return f"{platform}_{guild_id}_{channel_id}"


def get_user_id(platform: str, user_id: str, session, User, Bind) -> int | None:
    user = (
        session.scalars(
            select(User)
            .where(Bind.platform_id == user_id)
            .where(Bind.platform == platform)
            .join(Bind, User.id == Bind.bind_id)
        )
    ).one_or_none()

    if user:
        return user.id

    user = User(name=f"{platform}-{user_id}", created_at=datetime.now(UTC))
    session.add(user)
    session.commit()

    bind = Bind(
        platform_id=user_id,
        platform=f"{platform}",
        bind_id=user.id,
        original_id=user.id,
    )
    session.add(bind)
    session.commit()

    return user.id


def upgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    Base = automap_base()
    Base.prepare(autoload_with=op.get_bind())
    session = Session(op.get_bind())

    MessageRecord = Base.classes.repeat_messagerecord
    Enabled = Base.classes.repeat_enabled

    User = Base.classes.nonebot_plugin_user_user
    Bind = Base.classes.nonebot_plugin_user_bind

    # 写入数据
    logger.info("repeat: 开始迁移 session_id...")
    for message_record in session.query(MessageRecord).all():
        uninfo_platform = to_uninfo_platform(message_record.platform, message_record.group_id)
        session_id = get_session_id(
            uninfo_platform, message_record.group_id, message_record.guild_id, message_record.channel_id
        )
        uid = get_user_id(uninfo_platform, message_record.user_id, session, User, Bind)
        if session_id and uid:
            message_record.session_id = session_id
            message_record.uid = uid
        else:
            raise ValueError(
                f"无法为 {message_record.platform} {message_record.group_id} {message_record.guild_id} {message_record.channel_id} "
                f"生成 session_id 或 uid"
            )
    for enabled in session.query(Enabled).all():
        uninfo_platform = to_uninfo_platform(enabled.platform, enabled.group_id)
        session_id = get_session_id(uninfo_platform, enabled.group_id, enabled.guild_id, enabled.channel_id)
        if session_id:
            enabled.session_id = session_id
        else:
            raise ValueError(
                f"无法为 {enabled.platform} {enabled.group_id} {enabled.guild_id} {enabled.channel_id} 生成 session_id"
            )

    session.commit()
    logger.info("repeat: 迁移完成")
    # ### end Alembic commands ###


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
