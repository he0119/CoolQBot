<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Python</title>
	<atom:link href="https://devblogs.microsoft.com/python/feed/" rel="self" type="application/rss+xml" />
	<link>https://devblogs.microsoft.com/python</link>
	<description>Read the latest updates about all things Python at Microsoft</description>
	<lastBuildDate>Thu, 09 Dec 2021 21:30:10 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	

<image>
	<url>https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2018/10/Microsoft-Favicon.png</url>
	<title>Python</title>
	<link>https://devblogs.microsoft.com/python</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Python in Visual Studio Code – December 2021 Release</title>
		<link>https://devblogs.microsoft.com/python/python-in-visual-studio-code-december-2021-release/</link>
					<comments>https://devblogs.microsoft.com/python/python-in-visual-studio-code-december-2021-release/#comments</comments>
		
		<dc:creator><![CDATA[Savannah Ostrowski]]></dc:creator>
		<pubDate>Thu, 09 Dec 2021 21:30:10 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8796</guid>

					<description><![CDATA[<p>We are pleased to announce that the December 2021 release of the Python Extension for Visual Studio Code is now available. You can download the Python extension from the Marketplace, or install it directly from the extension gallery in Visual Studio Code.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-december-2021-release/">Python in Visual Studio Code – December 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>We are pleased to announce that the December 2021 release of the Python Extension for Visual Studio Code is now available. You can <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> from the Marketplace, or install it directly from the extension gallery in Visual Studio Code. If you already have the Python extension installed, you can also get the latest update by restarting Visual Studio Code. You can learn more about <a href="https://code.visualstudio.com/docs/python/python-tutorial">Python support in Visual Studio Code</a> in the documentation.</p>
<p>This announcement includes:</p>
<ul>
<li>Module rename refactoring with change preview, via Pylance</li>
<li>A rich editing experience when working with virtual or untrusted workspaces</li>
<li>An update regarding debugging with Python 2.7</li>
<li>A community highlight: Don Jayamanne’s new Python environment management extension</li>
</ul>
<p>If you’re interested, you can check the full list of improvements included in this release in our <a href="https://github.com/Microsoft/vscode-python/blob/master/CHANGELOG.md">changelog</a>.</p>
<h1 id="module-rename-with-change-preview">Module rename with change preview</h1>
<p>One of our most heavily requested features is finally here! As of this release, you can now more easily refactor your code using a new rename refactoring experience, via Pylance.</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/12/Dec2021-ModuleRenameV2.gif"><img class="aligncenter size-full wp-image-8797" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/12/Dec2021-ModuleRenameV2.gif" alt="Renaming a module with Pylance's new file/folder rename refactoring" width="2018" height="1238" /></a></p>
<p>Previously, when you renamed a file/module, you would have searched for references to that module in your codebase and update each location manually.</p>
<p>As of this release, after renaming a Python file/module, Pylance will find all the instances that need to be updated and provide you with a preview of all the changes to be made. If you want to customize the references to be updated, you can toggle check boxes at the line or file level at the preview stage before accepting the changes. You can also change your mind after seeing what would be changed at the preview stage and discard all changes.</p>
<p>With this preview, you can feel even more confident in the changes that are being made to your code and still save time when refactoring.</p>
<h1 id="rich-python-editing-experience-when-working-with-virtual-or-untrusted-workspaces">Rich Python editing experience when working with virtual or untrusted workspaces</h1>
<p>The Python extension now offers syntax error detection and limited IntelliSense support when using virtual or untrusted workspaces via Pylance. Just like when using github.dev or vscode.dev, you can now take advantage of a series of editing features you might want when exploring a codebase virtually, or when inspecting the workspace locally to decide whether you’ll mark it as trusted.</p>
<p>The feature set includes:</p>
<ul>
<li><a href="https://devblogs.microsoft.com/python/pylance-has-reached-stable/#semantic-colorization">Semantic highlighting</a></li>
<li>Completions for built-ins, Pylance’s bundled stubs, locally defined symbols in the current file, and symbols in open files</li>
<li>Syntax errors</li>
<li><a href="https://devblogs.microsoft.com/python/pylance-has-reached-stable/#code-navigation">Code navigation</a></li>
<li>Outline support</li>
<li><a href="https://devblogs.microsoft.com/python/pylance-has-reached-stable/#function-signature-help-with-parameter-and-return-type-information">Function signature help</a></li>
<li><a href="https://devblogs.microsoft.com/python/pylance-has-reached-stable/#contextual-document-highlighting">Contextual document highlighting</a></li>
</ul>
<p>We’re excited for you to give this new experience a try and welcome any feedback on the <a href="https://github.com/microsoft/pylance-release">Pylance issue tracker.</a></p>
<h1 id="an-update-on-debugging-with-python-2-7">An update on debugging with Python 2.7</h1>
<p>Following up <a href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-september-2021-release/">last September’s announcement</a> on limited IntelliSense support for Python 2.7, this is the last release with support for debugging locally with Python 2.7. This is because our debugger, <a href="http://github.com/microsoft/debugpy">debugpy</a>, will <a href="https://github.com/microsoft/debugpy/issues/799">no longer Python 2.7</a> starting in January 2022.</p>
<p>This change should impact only the local experience, and not remote debugging &#8211; attaching the debugger to remote processes running in Python 2.7 will still be supported.</p>
<h1 id="python-environment-manager-extension">Python Environment Manager extension</h1>
<p>You can now inspect your Python environments and its packages with the <a href="https://github.com/DonJayamanne/vscode-python-manager">Python Environment Manager extension</a>! This extension is developed and maintained by Don Jayamanne, a member of our team and the <a href="https://devblogs.microsoft.com/python/don-jayamanne-joins-microsoft/">creator of the Python extension</a>. While not an official Microsoft extension, we wanted to give it a shout-out to help spread the word about it!</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/12/Dec2021-PythonEnvManager.gif"><img class="aligncenter size-full wp-image-8798" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/12/Dec2021-PythonEnvManager.gif" alt="Visualizing information and packages of Python environments with the Python environment manager extension" width="2210" height="1192" /></a></p>
<p>With the Python environment manager, you can open the manager view and see information on multiple Python environments located on your machine &#8211; even virtual environments not located in your workspace. You can then check which packages are installed in that environment as well as their versions.</p>
<p>You can also create multiple terminals for different environments – once you click on the terminal icon next to an environment, it will automatically activate it.</p>
<p>If you have any feedback or feature requests, you can file an issue on the Python environment manager’s <a href="https://github.com/DonJayamanne/vscode-python-manager">GitHub repository</a>.</p>
<h1 id="other-changes-and-enhancements">Other Changes and Enhancements</h1>
<p>We would also like to extend special thanks to this month’s contributors:</p>
<ol>
<li><a href="https://github.com/bhrutledge">Brian Rutledge</a>: Partial fix for using the same directory as discovery when running tests (<a href="https://github.com/Microsoft/vscode-python/issues/9553">#9553</a>), &#8211;rootdiris no longer interpreted as a test folder when using pytest (<a href="https://github.com/Microsoft/vscode-python/issues/16079">#16079</a>), and fix for pytest run all tests when using ini and cwd. (<a href="https://github.com/Microsoft/vscode-python/issues/17546">#17546</a>)</li>
<li><a href="https://github.com/mjpieters">Martijn Pieters</a>: Fix for issue with parsing pytest node ids. (<a href="https://github.com/Microsoft/vscode-python/issues/17676">#17676</a>)</li>
<li><a href="https://github.com/ssbarnea">Sorin Sbarnea</a>: Ensure that path towards external tools like linters are not synched between machines. (<a href="https://github.com/microsoft/vscode-python/pull/18008">#18008</a>)</li>
</ol>
<p>Be sure to <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> for Visual Studio Code now to try out the above improvements. If you run into any problems or have suggestions, <a href="https://github.com/microsoft/vscode-python/issues/new/choose">please file an issue</a> on the <a href="https://github.com/Microsoft/vscode-python">Python VS Code GitHub</a> page.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-december-2021-release/">Python in Visual Studio Code – December 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://devblogs.microsoft.com/python/python-in-visual-studio-code-december-2021-release/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Changes to How We Bundle Python in Visual Studio</title>
		<link>https://devblogs.microsoft.com/python/changes-to-how-we-bundle-python-in-visual-studio/</link>
					<comments>https://devblogs.microsoft.com/python/changes-to-how-we-bundle-python-in-visual-studio/#respond</comments>
		
		<dc:creator><![CDATA[Graham Wheeler]]></dc:creator>
		<pubDate>Tue, 07 Dec 2021 21:34:36 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8781</guid>

					<description><![CDATA[<p>With the release of Visual Studio 2022, we are making changes to how we support installing Python runtimes from Visual Studio Setup, to help reconcile the fact that the lifetime of Python versions available as binary installers from the Python Software Foundation is different to that of Visual Studio.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/changes-to-how-we-bundle-python-in-visual-studio/">Changes to How We Bundle Python in Visual Studio</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>With the release of Visual Studio 2022, we are making changes to how we support installing Python runtimes from Visual Studio Setup, to help reconcile the fact that the lifetime of Python versions available as binary installers from the Python Software Foundation is different to that of Visual Studio.</p>
<p>Each version of Visual Studio targets a specific Python version. For example, Visual Studio 2019 targeted Python 3.7, while Visual Studio 2022 targets Python 3.9 (Python 3.10 has just come out, but there are still many popular packages that are not fully supported, so Python 3.9 is a better choice). The life cycle of Python versions is very different to that of Visual Studio releases. New versions of Python are released annually, and binary installers are available for Windows for 1.5 years after release. That means that the last binary installer update for Python 3.9 will be made available by the Python Software Foundation (PSF) around March in 2022, and earlier versions are not getting installer updates at all.</p>
<p>Going forward, <em>the most recent release of Visual Studio</em> will support <em>the most recent version of Python that has broad adoption</em>. That means at some point in the future you can expect newer releases of Visual Studio 2022 to add support for Python 3.10, and then 3.11. However, older versions of the Python workload for Visual Studio will not be updated to support newer versions of Python.</p>
<p>This poses a problem if security issues are found in older versions of Python. In that case, our approach will be to mark versions of Python that are not getting updated installers built by PSF and that have known security issues being marked as “Out of Support” in Visual Studio setup. We will not be removing these versions, nor adding newer versions.</p>
<p>The reasons for doing this are:</p>
<ul>
<li>We want to mark old versions as “out of support” and not select them by default to make it clear that these versions of Python are effectively past their end of life and may have security vulnerabilities;</li>
<li>At the same time, we don’t want to remove them, as customers may still need them; code is often updated to support new versions slowly if at all, and in many cases the security issues that may exist are edge cases that may not be relevant; customers should use their own judgement about the risks involved in continuing to use old versions of Python;</li>
<li>With the exception of adding Python 3.9 installer to Visual Studio 2019, we don’t want to add installers for new versions of Python that may not be fully supported by the Python workload; you can use newer versions of Python to run your older code in most cases with no issues, but we want to avoid giving the impression that changes to the Python language are fully supported by older versions of Visual Studio when they are not;</li>
<li>In most cases, you can simply install a newer version of Python from <a href="https://python.org">https://python.org</a> or the Windows store and use your existing Python code unchanged; the number of breaking changes between Python versions is small and typically in edge cases;</li>
</ul>
<p>To help aid this transition we made an exception in Visual Studio 2019 where we added an install option for Python 3.9 (which will in turn be marked as “out of support” sometime in 2022).</p>
<p>We’re making this change now as the language server in Visual Studio 2019 has been deprecated, while Visual Studio 2022 ships with Pylance, our modern and performant language server. The language server is the component most affected by changes in Python versions, so we will have more flexibility in the future as to how we reconcile the difference between the lifetime of Python versions and that of Visual Studio versions. We continue to evaluate how best to serve our users and may make further changes to our approach in the future.</p>
<p></p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/changes-to-how-we-bundle-python-in-visual-studio/">Changes to How We Bundle Python in Visual Studio</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://devblogs.microsoft.com/python/changes-to-how-we-bundle-python-in-visual-studio/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Python in Visual Studio Code – November 2021 Release</title>
		<link>https://devblogs.microsoft.com/python/python-in-visual-studio-code-november-2021-release/</link>
		
		<dc:creator><![CDATA[Savannah Ostrowski]]></dc:creator>
		<pubDate>Thu, 04 Nov 2021 23:34:53 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8758</guid>

					<description><![CDATA[<p>We are pleased to announce that the November 2021 release of the Python Extension for Visual Studio Code is now available. You can download the Python extension from the Marketplace, or install it directly from the extension gallery in Visual Studio Code.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-november-2021-release/">Python in Visual Studio Code – November 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>We are pleased to announce that the November 2021 release of the Python Extension for Visual Studio Code is now available. You can <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> from the Marketplace, or install it directly from the extension gallery in Visual Studio Code. If you already have the Python extension installed, you can also get the latest update by restarting Visual Studio Code. You can learn more about <a href="https://code.visualstudio.com/docs/python/python-tutorial">Python support in Visual Studio Code</a> in the documentation.</p>
<p>Last month we focused on housekeeping GitHub issues and pull requests. We reduced our open issue count by 20% by closing (triaging or fixing) 288 issues! If you’re interested, you can check the full list of improvements in our <a href="https://github.com/Microsoft/vscode-python/blob/master/CHANGELOG.md">changelog</a>.</p>
<p>As part of this release, the Microsoft Python Language Server has reached end of life.</p>
<h1 id="the-microsoft-python-language-server-has-reached-end-of-life">The Microsoft Python Language Server has reached end of life</h1>
<p>In September, <a href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-september-2021-release/#microsoft-python-language-server-end-of-life-november-2021">we announced</a> that the Microsoft Python Language Server would be reaching end of life as of the November 2021 release of the Python extension. Since then, we’ve encouraged our remaining legacy language server users to switch to a supported language server – either <a href="https://devblogs.microsoft.com/python/pylance-has-reached-stable">Pylance</a> (our default and recommended language support) or <a href="https://github.com/pappasam/jedi-language-server">Jedi</a>.</p>
<p>As of today’s release, all remaining users who have not chosen a new language server have been flipped to the default language support for Python in Visual Studio Code – Pylance. If at any point you want to try a different language server, you can do that by <a href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-may-2021-release/#configuring-your-language-server">updating your settings.</a></p>
<p>We again want to thank our Microsoft Python Language Server users for their feedback over the years. You all have helped make Python in Visual Studio Code what it is today!</p>
<h1 id="other-changes-and-enhancements">Other Changes and Enhancements</h1>
<p>We have also added small enhancements and fixed issues requested by users that should improve your experience working with Python in Visual Studio Code. Some notable changes include:</p>
<ul>
<li>Support environment variable substitution for “python” property in the launch.json file. (<a href="https://github.com/Microsoft/vscode-python/issues/12289">#12289</a>)</li>
<li>Support <em>expectedFailure </em>when running unittest tests using pytest. (<a href="https://github.com/Microsoft/vscode-python/issues/8427">#8427</a>)</li>
<li>Support unittestsub-tests. (<a href="https://github.com/Microsoft/vscode-python/issues/17561">#17561</a>)</li>
<li>Fix for running all tests when using ini. (<a href="https://github.com/Microsoft/vscode-python/issues/17546">#17546</a>)</li>
<li>Fix unresponsive extension issues. (<a href="https://github.com/Microsoft/vscode-python/issues/11924">#11924</a>)</li>
</ul>
<p>We would like to thank all participants of the <a href="https://anitab-org.github.io/open-source-day/upcoming/#overview">Grace Hopper Celebration’s Open Source Day</a> who contributed to the Python extension last October:</p>
<ul>
<li><a href="https://github.com/Carolinekung2">Carolinekung2 </a>: Update homebrew instructions to install Python 3. (<a href="https://github.com/Microsoft/vscode-python/issues/17590">#17590</a>)</li>
<li><a href="https://github.com/quynhd07">Quynh Do</a>: Change text when selecting or clearing interpreters in a multiroot folder scenario. (<a href="https://github.com/microsoft/vscode-python/issues/17037">#10737</a>)</li>
<li><a href="https://github.com/analiabs">Analía Bannura</a> and <a href="https://github.com/arsentieva">Anna Arsentieva</a>: Rename the commands in the Run/Debug button of the editor title. (<a href="https://github.com/Microsoft/vscode-python/issues/17019">#17019</a>)</li>
<li><a href="https://github.com/thi-lee">Thi Le</a>: Improve setting description for enabling A/B tests. (<a href="https://github.com/Microsoft/vscode-python/issues/7793">#7793</a>)</li>
<li><a href="https://github.com/Vidushi-Gupta">Vidushi Gupta</a>: Reword message for A/B testing in the output channel. (<a href="https://github.com/Microsoft/vscode-python/issues/6352">#6352</a>)</li>
<li><a href="https://github.com/IceJinx33">Aliva Das</a>: Use replaceAll for replacing separators. (<a href="https://github.com/Microsoft/vscode-python/issues/15288">#15288</a>)</li>
<li><a href="https://github.com/Vidushi-Gupta">Vidushi Gupta</a>: Fix for when creating new Integrated Terminal doesn&#8217;t take selected workspace into account for activating the environment. (<a href="https://github.com/Microsoft/vscode-python/issues/15522">#15522</a>)</li>
<li> <a href="https://github.com/nayana-vinod">Nayana Vinod</a> and <a href="https://github.com/JessieJolly">Jessica Jolly</a>: Python extension now activates on onDebugInitialConfigurations. (<a href="https://github.com/Microsoft/vscode-python/issues/9557">#9557</a>)</li>
</ul>
<p>Last but not least, special thanks to this month’s contributors:</p>
<ul>
<li><a href="https://github.com/afikrim">afikrim</a>: Change drive first before changing directory in windows, to anticipate running file outside working directory with different storage drive. (<a href="https://github.com/Microsoft/vscode-python/issues/14730">#14730</a>)</li>
<li><a href="https://github.com/acash715">acash715</a>: If the executeInFileDir setting is enabled, always change to the script directory before running the script, even if the script is in the Workspace folder. (<a href="https://github.com/Microsoft/vscode-python/issues/15181">#15181</a>)</li>
<li><a href="https://github.com/lithammer">Peter Lithammer</a>: Fix truncated mypy errors by setting &#8211;no-pretty. (<a href="https://github.com/Microsoft/vscode-python/issues/16836">#16836</a>)</li>
</ul>
<p>Be sure to <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> for Visual Studio Code now to try out the above improvements. If you run into any problems or have suggestions, <a href="https://github.com/microsoft/vscode-python/issues/new/choose">please file an issue</a> on the <a href="https://github.com/Microsoft/vscode-python">Python VS Code GitHub</a> page.</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-november-2021-release/">Python in Visual Studio Code – November 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Anaconda licensing for Microsoft products and services</title>
		<link>https://devblogs.microsoft.com/python/anaconda-licensing/</link>
		
		<dc:creator><![CDATA[Steve Dower]]></dc:creator>
		<pubDate>Mon, 25 Oct 2021 22:06:06 +0000</pubDate>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Anaconda]]></category>
		<category><![CDATA[Data Science]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8742</guid>

					<description><![CDATA[<p>Our friends at Anaconda have posted a joint announcement last week regarding the use of their repository from Microsoft cloud-hosted products. See the full announcement on their website.<br />
Today, Anaconda, Inc. announced a collaboration with Microsoft to enable customers to confidently access Anaconda’s curated library of open-source packages within Microsoft Cloud-hosted products and services,</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/anaconda-licensing/">Anaconda licensing for Microsoft products and services</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Our friends at Anaconda have posted a joint announcement last week regarding the use of their repository from Microsoft cloud-hosted products. See the full announcement on <a href="https://www.anaconda.com/press/anaconda-announces-collaboration-with-microsoft">their website</a>.</p>
<blockquote><p>Today, Anaconda, Inc. announced a collaboration with Microsoft to enable customers to confidently access Anaconda’s curated library of open-source packages within Microsoft Cloud-hosted products and services, including Azure services like Azure Machine Learning, as well as GitHub services such as GitHub Codespaces and GitHub Actions, without the requirement of a separate license.<sup><a href="https://docs.microsoft.com/en-us/legal/machine-learning/conda-licensing">1</a></sup></p></blockquote>
<p>We are very excited for our customers to continue to have access to Anaconda’s packages across all of our cloud-hosted services, and to make Azure an easy and safe choice for your data science and machine learning work.</p>
<p>Check out each service’s documentation for instructions on using Conda with Anaconda’s packages or your own repository, as the details may vary. This coverage is only for our services where we’ve provided Conda support, and doesn’t include your own custom virtual machines or on-premise deployments.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/anaconda-licensing/">Anaconda licensing for Microsoft products and services</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Python in Visual Studio Code – October 2021 Release</title>
		<link>https://devblogs.microsoft.com/python/python-in-visual-studio-code-october-2021-release/</link>
					<comments>https://devblogs.microsoft.com/python/python-in-visual-studio-code-october-2021-release/#comments</comments>
		
		<dc:creator><![CDATA[Luciana Abud]]></dc:creator>
		<pubDate>Thu, 07 Oct 2021 22:20:58 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8720</guid>

					<description><![CDATA[<p>We are pleased to announce that the October 2021 release of the Python Extension for Visual Studio Code is now available. You can download the Python extension from the Marketplace, or install it directly from the extension gallery in Visual Studio Code.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-october-2021-release/">Python in Visual Studio Code – October 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>We are pleased to announce that the October 2021 release of the Python Extension for Visual Studio Code is now available. You can <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> from the Marketplace, or install it directly from the extension gallery in Visual Studio Code. If you already have the Python extension installed, you can also get the latest update by restarting Visual Studio Code. You can learn more about <a href="https://code.visualstudio.com/docs/python/python-tutorial">Python support in Visual Studio Code</a> in the documentation.</p>
<p>In this release we closed a total of <a href="https://github.com/microsoft/vscode-python/milestone/71?closed=1">88 issues</a>, and it includes:</p>
<ul>
<li>Debugging support for Jupyter Notebooks</li>
<li>A new Python walkthrough</li>
<li>Improvements to the debugging experience for Python files and projects</li>
</ul>
<p>If you’re interested, you can check the full list of improvements in our <a href="https://github.com/Microsoft/vscode-python/blob/master/CHANGELOG.md">changelog</a>.</p>
<h1 id="debugging-support-for-jupyter-notebooks">Debugging support for Jupyter Notebooks</h1>
<p>We’re excited to announce that you can now debug your Python cells on Jupyter notebooks!</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-jupyternotebookdebugging.gif"><img class="aligncenter size-full wp-image-8722" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-jupyternotebookdebugging.gif" alt="Debugging a Jupyter notebook cell" width="1731" height="1266" /></a></p>
<p>To try it out, make sure you have ipykernel v6+ installed in your selected kernel. Then set a breakpoint, select the Debug Cell command from the drop-down menu next to the play button and start inspecting your code with all the features the debugger has to offer!</p>
<h1 id="new-python-walkthrough">New Python walkthrough</h1>
<p>We’re excited to announce that this release includes a walkthrough with some basic set up steps to improve the getting started experience for Python in VS Code.</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-Walkthrough.png"><img class="aligncenter size-full wp-image-8723" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-Walkthrough.png" alt="Python walkthrough in VS Code with basic set up steps" width="1868" height="1133" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-Walkthrough.png 1868w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-Walkthrough-300x182.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-Walkthrough-1024x621.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-Walkthrough-768x466.png 768w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-Walkthrough-1536x932.png 1536w" sizes="(max-width: 1868px) 100vw, 1868px" /></a></p>
<p>The walkthrough covers steps such as Python installation, selection of an interpreter for your project and how to run and debug Python files in VS Code. We hope this will be a quick and helpful guide for those learning or starting Python for the first time in VS Code!</p>
<h1 id="improvements-in-the-debugging-experience-for-python-projects">Improvements in the debugging experience for Python projects</h1>
<p style="background: white; margin: 0in 0in 12.0pt 0in;"><span style="font-family: 'Segoe UI',sans-serif; color: #24292f;">When working with workspaces with no launch.json configuration present, the Python extension would display a debugger configuration menu every time you would debug your Python file or project. This could be particularly annoying when debugging a web application with custom arguments (like Flask, Django or FastAPI, for example).</span></p>
<p style="background: white; margin: 0in 0in 12.0pt 0in;"><span style="font-family: 'Segoe UI',sans-serif; color: #24292f;">Now you no longer need to provide a configuration every time you start debugging, as the first selection you make is reused for the rest of the session.</span></p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-debugcaching.gif"><img class="aligncenter size-full wp-image-8721" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/10/Oct21-debugcaching.gif" alt="Caching of Python debug configuration " width="1824" height="1048" /></a></p>
<h1 id="other-changes-and-enhancements">Other Changes and Enhancements</h1>
<p>We have also added small enhancements and fixed issues requested by users that should improve your experience working with Python in Visual Studio Code. Some notable changes include:</p>
<ul>
<li>python.testing.cwd setting is no longer ignored when discovering or running tests. (<a href="https://github.com/microsoft/vscode-python/issues/8678">#8678</a>)</li>
<li>Upgraded to Jedi 0.18 and enabled it behind the language server protocol. Remove Jedi-related settings python.jediMemoryLimit and python.jediPath, since they are not used with the new language server implementation. (<a href="https://github.com/Microsoft/vscode-python/issues/11995">#11995</a>)</li>
<li>Removed support for rope, ctags and pylintMinimalCheckers setting. Refactoring, syntax errors and workspace symbols are now supported via language servers. (<a href="https://github.com/Microsoft/vscode-python/issues/10440">#10440</a>, <a href="https://github.com/Microsoft/vscode-python/issues/13321">#13321</a>, <a href="https://github.com/Microsoft/vscode-python/issues/16063">#16063</a>)</li>
<li>Default value of python.linting.pylintEnabled has been changed to false. (<a href="https://github.com/Microsoft/vscode-python/issues/3007">#3007</a>)</li>
</ul>
<p>Special thanks to this month’s contributors:</p>
<ul>
<li><a href="https://github.com/anu-ka">Anupama Nadig</a>: Fix casing of text in unittest patterns quickpick. (<a href="https://github.com/Microsoft/vscode-python/issues/17093">#17093</a>)</li>
<li><a href="https://github.com/edemaine/">Erik Demaine</a>: Improve pattern matching for shell detection on Windows. (<a href="https://github.com/Microsoft/vscode-python/issues/17426">#17426</a>)</li>
<li><a href="https://github.com/ilexei">ilexei</a>: Changed the way of searching left bracket [ in case of subsets of tests. (<a href="https://github.com/Microsoft/vscode-python/issues/17461">#17461</a>)</li>
</ul>
<p>Be sure to <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> for Visual Studio Code now to try out the above improvements. If you run into any problems or have suggestions, <a href="https://github.com/microsoft/vscode-python/issues/new/choose">please file an issue</a> on the <a href="https://github.com/Microsoft/vscode-python">Python VS Code GitHub</a> page.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-october-2021-release/">Python in Visual Studio Code – October 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://devblogs.microsoft.com/python/python-in-visual-studio-code-october-2021-release/feed/</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		
			</item>
		<item>
		<title>Python in Visual Studio Code – September 2021 Release</title>
		<link>https://devblogs.microsoft.com/python/python-in-visual-studio-code-september-2021-release/</link>
					<comments>https://devblogs.microsoft.com/python/python-in-visual-studio-code-september-2021-release/#comments</comments>
		
		<dc:creator><![CDATA[Savannah Ostrowski]]></dc:creator>
		<pubDate>Thu, 02 Sep 2021 18:52:43 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8674</guid>

					<description><![CDATA[<p>We are pleased to announce that the September 2021 release of the Python Extension for Visual Studio Code is now available. You can download the Python extension from the Marketplace, or install it directly from the extension gallery in Visual Studio Code.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-september-2021-release/">Python in Visual Studio Code – September 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>We are pleased to announce that the September 2021 release of the Python Extension for Visual Studio Code is now available. You can <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> from the Marketplace, or install it directly from the extension gallery in Visual Studio Code. If you already have the Python extension installed, you can also get the latest update by restarting Visual Studio Code. You can learn more about  <a href="https://code.visualstudio.com/docs/python/python-tutorial">Python support in Visual Studio Code</a> in the documentation.</p>
<p>In this release we closed <a href="https://github.com/microsoft/vscode-python/issues?q=is%3Aissue+milestone%3A%22August+2021%22+is%3Aclosed">80 issues</a>, and it includes:</p>
<ul>
<li>A rich Python editing experience in the browser</li>
<li>Revamped testing interface</li>
<li>New button for running and debugging files on the editor</li>
<li>An update regarding the Microsoft Python Language Server’s end of life, as well as for Python 2.7 IntelliSense support.</li>
</ul>
<p>If you’re interested, you can check the full list of improvements in our <a href="https://github.com/Microsoft/vscode-python/blob/master/CHANGELOG.md">changelog</a>.</p>
<h1 id="a-rich-python-editing-experience-in-the-browser-via-github-dev">A rich Python editing experience (in the browser!) via github.dev</h1>
<p>We are delighted to announce that as of this release you can enjoy the performant editing experience of Pylance in the browser via <a href="https://github.dev/">github.dev</a>. If you are unfamiliar with github.dev, you can head over to any repo, pull request, or file on GitHub and hit ‘.’ on your keyboard (or change the URL to github.dev) to give it a shot!</p>
<p>We’ve added support for the core editing features you might want when exploring a new codebase or making minor edits to your Python code. These features include:</p>
<ul>
<li><a href="https://devblogs.microsoft.com/python/pylance-has-reached-stable/#semantic-colorization">Semantic highlighting</a></li>
<li>Completions for built-ins, Pylance’s bundled stubs, locally defined symbols in the current file, and symbols in open files</li>
<li>Syntax errors</li>
<li><a href="https://devblogs.microsoft.com/python/pylance-has-reached-stable/#code-navigation">Code navigation</a></li>
<li>Outline support</li>
<li><a href="https://devblogs.microsoft.com/python/pylance-has-reached-stable/#function-signature-help-with-parameter-and-return-type-information">Function signature help</a></li>
<li><a href="https://devblogs.microsoft.com/python/pylance-has-reached-stable/#contextual-document-highlighting">Contextual document highlighting</a></li>
</ul>
<p>You can check out Dan Taylor giving <a href="https://www.youtube.com/watch?v=ujxj1YX7PWM">a demo on the Python Bytes podcast</a> of this new experience if you’d like!</p>
<p>We’re excited for you to give this new experience a try and welcome any feedback on the <a href="https://github.com/microsoft/pylance-release">Pylance issue tracker.</a></p>
<p>Although running Python code in the browser isn’t yet supported, you can do so in a Jupyter notebook with the <a href="https://marketplace.visualstudio.com/items?itemName=joyceerhl.vscode-pyolite">vscode-pyolite extension</a> (in preview), made by one of our team members!</p>
<h1 id="revamped-testing-interface">Revamped Testing Interface</h1>
<p>We’re excited to announce that we have revamped the look of our Python testing features by utilizing the built-in test explorer in VS Code. You can now enjoy a more stable UI experience for test discovery, navigation and status rendering, as well as new features such as test search, run a selection of tests, rerun last executed test, and more. With this change alone, <a href="https://github.com/microsoft/vscode-python/issues?page=1&amp;q=is%3Aissue+label%3Aarea-testing+milestone%3A%22August+2021%22+is%3Aclosed">we have closed 55 issues</a> on our GitHub repo!</p>
<h2 id="test-configuration"><span style="font-family: 'Segoe UI',sans-serif;">Test configuration </span></h2>
<p>Once the Python extension activates, you will see the Test Explorer on the activity bar. If you haven’t configured the testing features, you will see an option to do so on the welcome view:</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-ConfigureTests.png"><img class="aligncenter wp-image-8675 size-medium" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-ConfigureTests-230x300.png" alt="Configure Python tests button on the test explorer view" width="230" height="300" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-ConfigureTests-230x300.png 230w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-ConfigureTests.png 607w" sizes="(max-width: 230px) 100vw, 230px" /></a></p>
<h2 id="test-discovery"><span style="font-family: 'Segoe UI',sans-serif;">Test discovery </span></h2>
<p>Once the testing features are configured, the Python extension attempt to discover tests. Once they’re discovered, you will see your tests listed on the test explorer:</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-TestsDiscovered.png"><img class="aligncenter wp-image-8680 size-medium" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-TestsDiscovered-240x300.png" alt="Tests displayed on the test explorer once they are discovered" width="240" height="300" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-TestsDiscovered-240x300.png 240w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-TestsDiscovered.png 622w" sizes="(max-width: 240px) 100vw, 240px" /></a></p>
<p>Tests are now discovered automatically by default whenever you add, delete, or update any python file in the workspace. You can disable that functionality by changing the &#8220;python.testing.autoTestDiscoverOnSaveEnabled&#8221; setting to “false”.</p>
<h2 id="test-navigation"><span style="font-family: 'Segoe UI',sans-serif;">Test Navigation</span></h2>
<p>You can navigate to test methods or files through the test explorer by clicking on “Go to Test” icon that shows when you hover over or click on a test item. But now you can also navigate to the test on the test explorer from the editor, by right-clicking on the gutter decoration and selecting “Reveal in Test Explorer”.</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-TestNavigation.gif"><img class="aligncenter size-full wp-image-8679" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-TestNavigation.gif" alt="Navigating to tests from the test explorer and from the editor" width="1561" height="1110" /></a></p>
<h2 id="run-and-debug-tests"><span style="font-family: 'Segoe UI',sans-serif;">Run and debug tests </span></h2>
<p>Although we’ve retired the code lenses, there are still more options for you to run and debug your tests:</p>
<h3 id="the-test-explorer"><strong>The test explorer</strong></h3>
<p>By hovering over the test items on the test explorer and clicking on the corresponding icons, as well as through the icons on the top right of the test explorer to run and debug all of the discovered tests. And now you can also run a selection of tests by Ctrl + clicking (or Cmd + Clicking if you’re on macOS) the ones you’d like to run in the explorer, and then clicking on the run icon for one of the tests in the selection:</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-RunTestsThroughExplorer.gif"><img class="aligncenter size-full wp-image-8678" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-RunTestsThroughExplorer.gif" alt="Running tests through the test explorer" width="1561" height="1110" /></a></p>
<h3 id="the-editor"><strong>The editor</strong></h3>
<p>Although we’ve retired the code lenses, you can still run and debug tests in the editor by clicking on the gutter decorations. You can also right-click on them to debug the tests instead (and you can even change the default behaviour what clicking on the decorators will do to through the &#8220;testing.defaultGutterClickAction&#8221; setting).</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-RunTestsThroughEditor.gif"><img class="aligncenter size-full wp-image-8677" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-RunTestsThroughEditor.gif" alt="Running tests through the gutter decorations on theeditor" width="1561" height="1110" /></a></p>
<p>To configure the debugger for tests, you can specify &#8220;purpose&#8221;: [&#8220;debug-test&#8221;] in the launch.json file in the .vscode folder from your workspace.</p>
<p>For example, the configuration below in the launch.json file disables the justMyCode setting for debugging tests:</p>
<pre class="prettyprint">{
    "name": "Python: Current File",
    "type": "python",
    "request": "launch",
    "program": "${file}",
    "console": "integratedTerminal",
    "justMyCode": false,
    "purpose": ["debug-test"]
}</pre>
<h3 id="commands"><strong>Commands</strong></h3>
<p>We now have new commands that can be particularly helpful when you’re creating or modifying tests. We often want to run the same test method a couple of times when we’re creating it. To make that simpler and more accessible, you can use the “Test: Run Test at Cursor” command to run the method where you have the cursor at in the editor (and you can even <a href="https://code.visualstudio.com/docs/getstarted/keybindings#_keyboard-shortcuts-editor">add a keyboard shortcut</a> for it so you can more easily do so!). Similarly, you can run the “Test: Rerun last run” command if you want to run the only last test you have executed.</p>
<p>Because we’re leveraging VS Code’s new <a href="https://code.visualstudio.com/api/extension-guides/testing">testing API</a>, a few of our testing commands have changed. If you are used to our old test commands or have key-bindings set up for them, <a href="https://code.visualstudio.com/docs/python/testing#_test-commands">you can reference our documentation</a> to see what the corresponding new commands are.</p>
<h1 id="new-button-for-running-and-debugging-files-on-the-editor">New button for running and debugging files on the editor</h1>
<p>We improved our “run button” on the editor to also include debugging files as an option. When you click on the icon it will run your active Python file in the terminal by default, but you can click on the down-arrow to change the action to debug it instead:</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-RunAndDebugIcon.gif"><img class="aligncenter size-full wp-image-8676" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/09/September2021-RunAndDebugIcon.gif" alt="Running and debugging using the new icons on the top right of the editor" width="1708" height="1074" /></a></p>
<p>You can also customize the action for what the debug icon does by creating a launch.json file and adding “purpose” : [“debug-in-terminal”] to your Python configuration.</p>
<p>For example, the configuration below enables stepping into non-user code when debugging through the debug icon on the editor:</p>
<pre class="prettyprint">{
    "name": "Python: Current File - Editor Button",
    "type": "python",
    "request": "launch",
    "program": "${file}",
    "console": "integratedTerminal",
    "justMyCode": false,
    "purpose": ["debug-in-terminal"]
}</pre>
<p>One thing to note is that this will only work for debugging files through the debug icon on the editor – it will not work when starting the debugger through the Run and Debug view or through F5.</p>
<h1 id="limited-intellisense-support-for-python-2-7-starting-in-october-2021">Limited IntelliSense support for Python 2.7 starting in October 2021</h1>
<p>Our IntelliSense support for Python 2.7 users comes from <a href="https://github.com/davidhalter/jedi/releases/tag/v0.17.2">Jedi 0.17</a>, which came out over a year ago and is the last release of Jedi that supported Python 2.7.  Since that time, we have begun using (and contributing to) <a href="https://github.com/pappasam/jedi-language-server">jedi-language-server</a>, which puts Jedi behind <a href="https://microsoft.github.io/language-server-protocol/">LSP</a>. This has given Jedi users better performance, refactoring and code navigation capabilities, but is only available for Jedi 0.18.</p>
<p>Starting with the 2021.10 of the Python extension, we will only offer support for Jedi 0.18 and higher, and no longer ship support for Jedi 0.17. We will also be removing support for ctags and rope at the same time.</p>
<p>You can check <a href="https://github.com/microsoft/vscode-python/wiki/Limited-support-for-Python-2.7">our wiki page</a> to learn more about the reason behind it and what you can do if you’re still using Python 2.7 in VS Code.</p>
<h1 id="microsoft-python-language-server-end-of-life-november-2021">Microsoft Python Language Server end of life November 2021</h1>
<p>In the June 2020 release, <a href="https://devblogs.microsoft.com/python/announcing-pylance-fast-feature-rich-language-support-for-python-in-visual-studio-code/">we announced our team’s investment in Pylance</a>, a new more performant and feature-rich Python language server, and the eventual deprecation of our legacy language server, the Microsoft Python Language Server Since this announcement, our team has <a href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-may-2021-release/">worked hard to improve language server support</a> in both Pylance and the open-source language server, <a href="https://github.com/pappasam/jedi-language-server">Jedi</a>.</p>
<p>With Pylance now as the default language support for Python for Visual Studio Code, almost all of our users have switched to our new language server. <strong>As such, the Microsoft Python Language Server will reach end of life with the November </strong><strong>release of the Python in Visual Studio Code extension. </strong>After deprecation, the <a href="https://github.com/microsoft/python-language-server">Microsoft Python Language Server repository</a> will be marked as archived. This will still allow you to fork and build upon the language server’s codebase if you’d like.</p>
<p>If you are still using this language server (your python.languageServer setting is set to “Microsoft”), you will now see a prompt asking you to choose a new language server – Pylance (recommended; default) or Jedi (open-source). Upon selection, your python.languageServer setting will be appropriately updated in your settings.json to reflect your choice. If at any point you want to try something new, you can do that by <a href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-may-2021-release/#configuring-your-language-server">updating your settings.</a> If by the November release you have not yet selected a new language server, your language server will automatically flip to the default language support for Python in Visual Studio Code – Pylance.</p>
<p>We’d like to thank all our Microsoft Python Language Server users for their feedback and support over the last couple of years. Your input helped shape what we believe is the best language support for Python in Visual Studio Code ever.</p>
<h1 id="other-changes-and-enhancements">Other Changes and Enhancements</h1>
<p>We have also added small enhancements and fixed issues requested by users that should improve your experience working with Python in Visual Studio Code. Some notable changes include:</p>
<ul>
<li>Improved display of interpreters list (<a href="https://github.com/microsoft/vscode-python/issues/16971">#16971</a>)</li>
<li>Removed support for nose (<a href="https://github.com/microsoft/vscode-python/issues/16371">#16371</a>)</li>
<li>Magic cells on Python notebooks no longer cause an error in Pylance (<a href="https://github.com/microsoft/vscode-python/issues/17058">#17058</a>)</li>
</ul>
<p>And huge thanks to this month’s contributors:</p>
<ul>
<li><a href="https://github.com/FiftysixTimes7">FiftysixTimes7</a>: Updated Simplified Chinese translation (<a href="https://github.com/Microsoft/vscode-python/issues/16916">#16916</a>)</li>
<li><a href="https://github.com/bigjools">JulianEdwards</a>: Fix for unittest discovery (<a href="https://github.com/Microsoft/vscode-python/issues/16593">#16593</a>)</li>
<li><a href="https://github.com/cdce8p">Marc Mueller</a>: Fix environment sorting for the Python: Select Interpreter (<a href="https://github.com/Microsoft/vscode-python/issues/16893">#16893</a>)</li>
</ul>
<p>Be sure to <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> for Visual Studio Code now to try out the above improvements. If you run into any problems or have suggestions, <a href="https://github.com/microsoft/vscode-python/issues/new/choose">please file an issue</a> on the <a href="https://github.com/Microsoft/vscode-python">Python VS Code GitHub</a> page.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-september-2021-release/">Python in Visual Studio Code – September 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://devblogs.microsoft.com/python/python-in-visual-studio-code-september-2021-release/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Out with the Old and In with the New: an Enhanced Jupyter Experience in DevOps</title>
		<link>https://devblogs.microsoft.com/python/out-with-the-old-and-in-with-the-new-an-enhanced-jupyter-experience-in-devops/</link>
		
		<dc:creator><![CDATA[sharonxu]]></dc:creator>
		<pubDate>Thu, 19 Aug 2021 22:29:11 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8638</guid>

					<description><![CDATA[<p>This post was co-authored by Michael Duncan, Azure Notebooks Software Engineer and<br />
Dinesh Chandnani, Azure Notebooks Principal Group Engineering Manager<br />
Say hello to our newly revamped extension in Azure DevOps! The latest extension allows you to render your .ipynb notebook files directly in Azure DevOps now with an improved viewing experience.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/out-with-the-old-and-in-with-the-new-an-enhanced-jupyter-experience-in-devops/">Out with the Old and In with the New: an Enhanced Jupyter Experience in DevOps</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p style="text-align: center;"><span style="color: #808080;"><em>This post was co-authored by Michael Duncan, Azure Notebooks Software Engineer and
Dinesh Chandnani, Azure Notebooks Principal Group Engineering Manager</em></span></p>
<p>Say hello to our newly <a href="https://marketplace.visualstudio.com/items?itemName=ms-air-aiagility.ipynb-renderer">revamped extension</a> in Azure DevOps! The latest extension allows you to render your .ipynb notebook files directly in Azure DevOps now with an improved viewing experience.</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/nb_in_ado.png"><img class="alignnone size-full wp-image-8643" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/nb_in_ado.png" alt="Image nb in ado" width="1574" height="1182" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/nb_in_ado.png 1574w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/nb_in_ado-300x225.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/nb_in_ado-1024x769.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/nb_in_ado-768x577.png 768w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/nb_in_ado-1536x1153.png 1536w" sizes="(max-width: 1574px) 100vw, 1574px" /></a></p>
<p>In addition to a new interface, our team has added new features to enhance your Jupyter Notebook support: Notebook Exports and Function Definition Viewers.</p>
<p>This version of the Jupyter Notebook extension supports Notebook Exports, which allows you to convert your .ipynb notebook to the following file formats:</p>
<ul>
<li>HTML,</li>
<li>LaTeX, or</li>
<li>Python (.py) files.</li>
</ul>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/export_in_ado-1.png"><img class="alignnone size-full wp-image-8646" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/export_in_ado-1.png" alt="Image export in ado" width="1183" height="562" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/export_in_ado-1.png 1183w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/export_in_ado-1-300x143.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/export_in_ado-1-1024x486.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/export_in_ado-1-768x365.png 768w" sizes="(max-width: 1183px) 100vw, 1183px" /></a></p>
<p>We have also launched a function definition viewer that allows you to view documentation of a class or method by hovering over it.</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/ls_in_ado.png"><img class="alignnone size-full wp-image-8642" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/ls_in_ado.png" alt="Image ls in ado" width="1251" height="766" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/ls_in_ado.png 1251w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/ls_in_ado-300x184.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/ls_in_ado-1024x627.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/ls_in_ado-768x470.png 768w" sizes="(max-width: 1251px) 100vw, 1251px" /></a></p>
<h3 id="get-started">Get Started</h3>
<p>If you do not already have the Jupyter Notebook extension, you can get started by installing it via the DevOps marketplace. Open up the <a href="https://marketplace.visualstudio.com/items?itemName=ms-air-aiagility.ipynb-renderer">extension page</a> and select “Get it Free”. From there, you will be prompted to install the extension or request that your project admin do so.</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions.png"><img class="alignnone size-full wp-image-8640" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions.png" alt="Image install instructions" width="1874" height="620" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions.png 1874w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions-300x99.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions-1024x339.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions-768x254.png 768w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions-1536x508.png 1536w" sizes="(max-width: 1874px) 100vw, 1874px" /></a></p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions2-1.png"><img class="alignnone size-full wp-image-8649" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions2-1.png" alt="Image install instructions2" width="1805" height="584" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions2-1.png 1805w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions2-1-300x97.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions2-1-1024x331.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions2-1-768x248.png 768w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/install_instructions2-1-1536x497.png 1536w" sizes="(max-width: 1805px) 100vw, 1805px" /></a></p>
<p>Once the extension is installed, simply navigate to a .ipynb notebook and select the “Preview” tab where your notebook will be rendered.</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/preview_tab_in_ado.png"><img class="alignnone size-full wp-image-8644" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/preview_tab_in_ado.png" alt="Image preview tab in ado" width="1574" height="436" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/preview_tab_in_ado.png 1574w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/preview_tab_in_ado-300x83.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/preview_tab_in_ado-1024x284.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/preview_tab_in_ado-768x213.png 768w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/preview_tab_in_ado-1536x425.png 1536w" sizes="(max-width: 1574px) 100vw, 1574px" /></a></p>
<p>The new extension has currently launched as a preview, and as such, we are actively looking for feedback. Give the extension a try and please <a href="https://marketplace.visualstudio.com/items?itemName=ms-air-aiagility.ipynb-renderer&amp;ssr=false#review-details">leave us with a star rating or a review</a> on our marketplace page. If you have in-depth suggestions, comments, or questions, please <a href="https://aka.ms/nbcomponentsurvey">complete our survey</a> and let us know your thoughts!</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/out-with-the-old-and-in-with-the-new-an-enhanced-jupyter-experience-in-devops/">Out with the Old and In with the New: an Enhanced Jupyter Experience in DevOps</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Feasibility, Use Cases, and Limitations of Pyodide</title>
		<link>https://devblogs.microsoft.com/python/feasibility-use-cases-and-limitations-of-pyodide/</link>
		
		<dc:creator><![CDATA[Luciana Abud]]></dc:creator>
		<pubDate>Wed, 11 Aug 2021 17:08:02 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8594</guid>

					<description><![CDATA[<p>This blog post was authored by Eleanor Boyd, 2021 Summer Intern for Python Tools for VS Code.<br />
Coming into an internship you never really know what to expect from your summer. What I definitely didn&#8217;t expect was that my whole summer would center around one library – Pyodide – and that it would leave such an impression on my team and organization.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/feasibility-use-cases-and-limitations-of-pyodide/">Feasibility, Use Cases, and Limitations of Pyodide</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p><em>This blog post was authored by <a href="https://www.linkedin.com/in/eleanorjboyd/">Eleanor Boyd</a>, 2021 Summer Intern for Python Tools for VS Code.</em></p>
<p>Coming into an internship you never really know what to expect from your summer. What I definitely didn&#8217;t expect was that my whole summer would center around one library – <a href="https://pyodide.org/en/stable/">Pyodide</a> – and that it would leave such an impression on my team and organization.</p>
<h2 id="what-is-pyodide">What is Pyodide?</h2>
<p>Pyodide is an open-source library that was started at Mozilla as part of the Iodide project. Pyodide allows a user to run Python in a web browser through having the Python interpreter compiled to Web Assembly (WASM). It comes with 75 packages already in the base library, most of which are part of the scientific stack such as <a href="https://numpy.org/">NumPy</a> and <a href="https://pandas.pydata.org/">Pandas</a>. Other packages can be installed if they are pure python wheels from <a href="https://pypi.org/">PyPI</a>. Check out the Pyodide library <a href="https://github.com/pyodide/pyodide">here</a> and the docs <a href="https://pyodide.org/en/stable/">here</a>.</p>
<p>With my project being very open-ended, the question I wanted to investigate was how can my team, the Python Tools for VS Code team, use Pyodide? The idea of running Python in a web browser seems amazing, but how easy is it to work with and what can we actually prototype?</p>
<h2 id="what-use-cases-can-we-see-pyodide-filling">What use cases can we see Pyodide filling?</h2>
<p>Since Python is a great language for beginners, we always keep beginner programmers and students top of mind when we think about who our users are and what they need. We have found that beginner users struggle to install and configure Python and these steps are a barrier during their getting started experience. Additionally, we have seen that some schools who restrict network access on school computers accidentally block students from downloading Python onto a school computer. Both of these problems could be fixed with the design of an extension, accessible through the <a href="https://marketplace.visualstudio.com/vscode">VS Code marketplace</a>, which would allow a user to run their Python code via Pyodide on the web. This was a very compelling use case and so I began exploring it as an option and I learned so much about Pyodide along the way. We were able to solve the problems with an extension as you can see in the demo below but this involved some workarounds that made it not production worthy. Here are my biggest takeaways and where I see this library going.</p>
<p><figure id="attachment_8596" aria-describedby="caption-attachment-8596" style="width: 2466px" class="wp-caption aligncenter"><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/pyodide.gif"><img class="wp-image-8596 size-full" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/pyodide.gif" alt="Prototype of running a Python file with Pyodide in VS Code " width="2466" height="1558" /></a><figcaption id="caption-attachment-8596" class="wp-caption-text"><span style="font-size: 10pt;"><em>In this demo a user writes a Python program then can run it using Pyodide by clicking the play button and selecting &#8220;Run with Pyodide&#8221;. The user&#8217;s code is the run with Pyodide in a monkey-patched version of Pyodide which allows it to run in Node. The result of the code is returned to the console for the user and as you can see it has strong performance speed.</em></span></figcaption></figure></p>
<h2 id="how-pyodide-works-and-its-limitations">How Pyodide Works and Its Limitations</h2>
<p>VS Code is built on top of <a href="https://www.electronjs.org/">Electron</a> which is an open source technology used to build native Node applications. During the process of trying to write a Pyodide extension for VS Code I discovered that <a href="https://github.com/pyodide/pyodide/issues/14">Pyodide did not have Node support;</a> it required a window object, which exists if Pyodide is run in a web worker or in a browser but does not exist in Node. The great news is a <a href="https://github.com/pyodide/pyodide/pull/1691">fix for this issue</a> has just been released and so our original idea can now be implemented without work-arounds.</p>
<p>Three other important considerations for Pyodide, that might be limitations based on the use case, are: restrictions on importing 3<sup>rd</sup>-party code, printing/returning script results, and restrictions on multifile programs. The way that Pyodide works is that you import the Pyodide script via a <a href="https://en.wikipedia.org/wiki/Content_delivery_network">CDN</a> or bundle the library along with your application, although this will increase your project size by <em>6.4 MB </em>for just the CPython standard library or 172.955 MB for the compressed Pyodide library with the <a href="https://github.com/pyodide/pyodide/tree/main/packages">75 pre-installed packages</a>. Since this is a web-based library, the rest of your application will be written in JavaScript/TypeScript such as a web worker, a web application, or a Node application which can all contain Pyodide. After importing Pyodide you can use a few simple but powerful commands to do everything else you would need with Pyodide. You simply run <em>pyodide.runPython(string of code)</em> and pass in a string of Python code that you want to run. Since Python rules apply, this should be a valid Python script. From there, Pyodide runs the code &#8212; there is an async command option as well &#8212; and prints any print commands to the console and returns the final return value. Due to this design, the location where Pyodide prints is based on the context in which it is called and only the final return value is captured by the main JavaScript/TypeScript script which is running Pyodide. The second limitation of this design is that Pyodide cannot handle multifile programs because the program is passed in as a string. Unrelated to these two limitations is the design of the package import system: Pyodide bundles 75 packages and additional packages can be imported if they are pure Python wheels hosted online, either on PyPI or another URL.</p>
<h2 id="advantages-of-pyodide">Advantages of Pyodide</h2>
<p>Given these concerns, are the advantages worth the potential limitations? I say yes (although my team makes no promises about the future <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f604.png" alt="😄" class="wp-smiley" style="height: 1em; max-height: 1em;" />). I think Pyodide brings a whole new set of opportunities to Python that are poised to become very impactful to all different types of developers. The size of Pyodide is a bit big but it is manageable, and the library has great performance speeds that remain constant across Chrome and Edge during our light testing. Since the project is open-source it is simple to add new supported libraries to Pyodide&#8217;s current list of 75 packages, and the library in general continues to be actively maintained by a few core contributors. The activity on the Pyodide repo means that issues are being answered quickly and new features such as Node support are being added consistently to the project. Pyodide is continuously improving, and the limitations right now should not be viewed as static.</p>
<h2 id="additional-examples-and-future-applications">Additional Examples and Future Applications</h2>
<p>The use case described in this article is just one compelling example of how Pyodide can help users and developers alike. My coworker <a href="https://twitter.com/LostInTangent/status/1392945004570583041">Jonathan Carter demoed another example on his Twitter</a> which is the extension <a href="https://marketplace.visualstudio.com/items?itemName=codespaces-Contrib.codeswing">CodeSwing</a> that he built and maintains which allows users to create/view interactive playgrounds within VS Code and does not require compilation, instead relying on Pyodide to run Python code. Additionally, Pyodide is being explored as a way to run Python tooling in VS Code. During my internship I worked on getting a lightweight intelisense extension for Python working which used Jedi run via Pyodide and was very straightforward since Jedi is one of the packages included in the Pyodide library. Additionally my coworker Joyce Er <a href="https://twitter.com/joyceerhl/status/1396548649069412357">demoed a personal project on her Twitter</a> that uses Pyodide to run Python code in a notebook and is backed by <a href="https://blog.jupyter.org/jupyterlite-jupyter-%EF%B8%8F-webassembly-%EF%B8%8F-python-f6e2e41ab3fa">JupyterLite</a> and uses the <a href="https://code.visualstudio.com/api/references/vscode-api">VS Code API</a>. Just in the Microsoft Developer Division there are already numerous use cases which demonstrate the power of Pyodide such as running code, Python tooling, interactive coding with VS Code, and Notebooks which all show how useful Pyodide can be if other organizations and individuals start to incorporate it into their projects. Python is such a useful language to developers because it brings an ecosystem of useful packages and Pyodide transfers this power to the customer. Pyodide could solve the problems presented by creating a great Python development experience in new products in and outside of Microsoft and I expect continued growth in this library as other use cases are discovered.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/feasibility-use-cases-and-limitations-of-pyodide/">Feasibility, Use Cases, and Limitations of Pyodide</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Python in Visual Studio Code – August 2021 Release</title>
		<link>https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2021-release/</link>
		
		<dc:creator><![CDATA[Luciana Abud]]></dc:creator>
		<pubDate>Fri, 06 Aug 2021 18:09:36 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8608</guid>

					<description><![CDATA[<p>We are pleased to announce that the August 2021 release of the Python Extension for Visual Studio Code is now available. You can download the Python extension from the Marketplace, or install it directly from the extension gallery in Visual Studio Code.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2021-release/">Python in Visual Studio Code – August 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>We are pleased to announce that the August 2021 release of the Python Extension for Visual Studio Code is now available. You can <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> from the Marketplace, or install it directly from the extension gallery in Visual Studio Code. If you already have the Python extension installed, you can also get the latest update by restarting Visual Studio Code. You can learn more about  <a href="https://code.visualstudio.com/docs/python/python-tutorial">Python support in Visual Studio Code</a> in the documentation.</p>
<p>This was a short release as we are now adjusting our release cadence to match that of VS Code (speaking of which, make sure to check the <a href="https://code.visualstudio.com/updates/v1_59">VS Code release notes</a> to see what’s new for all languages!). We’re excited to announce that the revamped Jupyter notebooks experience brought by the <a href="https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter">Jupyter extension</a> is now out of preview, and that we have an improved way of sorting Python interpreters on the selection list.</p>
<p>If you’re interested, you can check the list of improvements in our <a href="https://github.com/Microsoft/vscode-python/blob/main/CHANGELOG.md">changelog</a>.</p>
<h1 id="revamped-jupyter-notebooks-experience">Revamped Jupyter Notebooks Experience</h1>
<p>In July 2020, <a href="https://devblogs.microsoft.com/python/notebooks-are-getting-revamped/">we had announced</a> the preview of the new experience for Jupyter notebooks in VS Code. We’re excited that this much faster and feature-rich experience is now out of preview and available to all users of VS Code.</p>
<p><figure id="attachment_8609" aria-describedby="caption-attachment-8609" style="width: 1885px" class="wp-caption aligncenter"><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/NativeNotebooksOutOfPreview.gif"><img class="wp-image-8609 size-full" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/NativeNotebooksOutOfPreview.gif" alt="New Jupyter notebooks rendering and experience in VS Code " width="1885" height="1256" /></a><figcaption id="caption-attachment-8609" class="wp-caption-text"><span style="font-size: 8pt;"><em>Theme: <a href="https://marketplace.visualstudio.com/items?itemName=fisheva.eva-theme">Eva Light Bold</a></em></span></figcaption></figure></p>
<p>With this revamped experience, all the things you love about VS Code are better integrated:</p>
<ul>
<li>Source control diffing: cell changes are now easier to parse and to inspect in the source control view – you can even customize what types of changes you want displayed.</li>
<li>Key-bindings: default VS Code shortcuts as well as those provided by keymap extensions (e.g. <a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">VIM</a>) are now supported on notebook files.</li>
<li>High customization ability: customization of appearance or placement of many of the UI notebook elements – you can check all available settings by opening the Settings UI (<strong>File</strong> &gt; <strong>Preferences</strong> &gt; <strong>Settings</strong> and search for “Notebook”.<a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/NotebookSettings.png"><img class="aligncenter wp-image-8610 size-large" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/NotebookSettings-1024x686.png" alt="View of a few notebook customization settings " width="640" height="429" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/NotebookSettings-1024x686.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/NotebookSettings-300x201.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/NotebookSettings-768x515.png 768w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/NotebookSettings-1536x1030.png 1536w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/NotebookSettings.png 1890w" sizes="(max-width: 640px) 100vw, 640px" /></a></li>
</ul>
<p>You can learn more about Jupyter notebook support in VS Code on the <a href="https://code.visualstudio.com/docs/datascience/jupyter-notebooks">documentation</a>.</p>
<h1 id="improved-sorting-of-python-interpreters">Improved sorting of Python interpreters</h1>
<p>Previously, when running the “Python: Select Interpreter” command, the Python extension would display the list of all the Python interpreters it could find ordered alphabetically. When there are many Python environments on a machine, this often led to additional steps for interpreter selection that involved searching and a lot of scrolling. To make that process faster, we are now displaying the list of interpreters in a way so that the one you are most likely to want for your project shows first on the list and is easier to find. The order in which they are now displayed is the following:</p>
<ol>
<li>Environments located in the same path as the workspace root;</li>
<li>Globally-installed environments (e.g. $WORK_ON or conda);</li>
<li>Global installs (e.g. /usr/bin/python3.9)</li>
</ol>
<p>The Python interpreters with higher versions for each of those categories are displayed first.</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/InterpretersList.png"><img class="aligncenter size-full wp-image-8611" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/InterpretersList.png" alt="List of Python interpreters listed in the new sorting order" width="1156" height="640" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/InterpretersList.png 1156w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/InterpretersList-300x166.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/InterpretersList-1024x567.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/08/InterpretersList-768x425.png 768w" sizes="(max-width: 1156px) 100vw, 1156px" /></a></p>
<h1 id="other-changes-and-enhancements">Other Changes and Enhancements</h1>
<p>We also want to thank the following people who contributed this month to the Python extension in Visual Studio Code:</p>
<ul>
<li><a href="https://github.com/bfarahdel">@bfarahdel</a>: Sorted settings alphabetically (<a href="https://github.com/Microsoft/vscode-python/issues/8406">#8406</a>)</li>
<li><a href="https://github.com/jasleen101010">@jasleen101010</a>: Changed default language server to Pylance for extension development (<a href="https://github.com/Microsoft/vscode-python/issues/13007">#13007</a>)</li>
<li><a href="https://github.com/iChenLei">@iChenLei</a>: Replaced deprecated vscode-test with @vscode/test-electron for CI. (<a href="https://github.com/Microsoft/vscode-python/issues/16765">#16765</a>)</li>
</ul>
<p>Be sure to <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> for Visual Studio Code now to try out the above improvements. If you run into any problems or have suggestions, <a href="https://github.com/microsoft/vscode-python/issues/new/choose">please file an issue</a> on the <a href="https://github.com/Microsoft/vscode-python">Python VS Code GitHub</a> page.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2021-release/">Python in Visual Studio Code – August 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Python in Visual Studio Code – July 2021 Release</title>
		<link>https://devblogs.microsoft.com/python/python-in-visual-studio-code-july-2021-release/</link>
					<comments>https://devblogs.microsoft.com/python/python-in-visual-studio-code-july-2021-release/#comments</comments>
		
		<dc:creator><![CDATA[Luciana Abud]]></dc:creator>
		<pubDate>Tue, 20 Jul 2021 22:00:55 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://devblogs.microsoft.com/python/?p=8561</guid>

					<description><![CDATA[<p>We are pleased to announce that the July 2021 release of the Python Extension for Visual Studio Code is now available. You can download the Python extension from the Marketplace, or install it directly from the extension gallery in Visual Studio Code.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-july-2021-release/">Python in Visual Studio Code – July 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>We are pleased to announce that the July 2021 release of the Python Extension for Visual Studio Code is now available. You can <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> from the Marketplace, or install it directly from the extension gallery in Visual Studio Code. If you already have the Python extension installed, you can also get the latest update by restarting Visual Studio Code. You can learn more about  <a href="https://code.visualstudio.com/docs/python/python-tutorial">Python support in Visual Studio Code</a> in the documentation.</p>
<p>These are some of the notable changes introduced in this release:</p>
<ul>
<li>A faster way to configure project roots via a new Pylance quick fix</li>
<li>Selecting a Python interpreter no longer changes settings</li>
<li>New debugger features: step into targets and function breakpoints</li>
</ul>
<p>If you are interested, you can check the full list of improvements in our <a href="https://github.com/Microsoft/vscode-python/blob/master/CHANGELOG.md">changelog</a>.</p>
<h1 id="a-faster-way-to-configure-project-roots">A faster way to configure project roots</h1>
<p>We’re excited to announce that we’ve added a new quick fix to to allow you to more quickly configure your Python project roots!</p>
<p>A common issue we’ve heard developers experience in VS Code is seeing diagnostics (or yellow squiggles) under import statements when they open new projects and then not knowing what to do to resolve them.</p>
<p>Previously, configuring project roots would require setting python.analysis.extraPaths to tell Pylance what search paths to use for import resolution (that is, for finding the paths of packages that are imported to get the information necessary to provide IntelliSense features). Now, you’re able to skip the step of manually fiddling with your settings.json and trying to figure out the right search paths to add to extraPaths and instead have Pylance guide you via the editor.</p>
<p>You can now hover over the diagnostic on the import statement and either click the lightbulb icon or “Quick Fix&#8230;” in the tooltip and Pylance will suggest search paths to add to python.analysis.extraPaths, where appropriate.</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-ExtraPathsCodeAction.gif"><img class="aligncenter size-full wp-image-8562" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-ExtraPathsCodeAction.gif" alt="Quick fix to add project root to search paths to resolve unresolved import warnings with Pylance " width="800" height="400" /></a></p>
<h1 id="selecting-a-python-interpreter-no-longer-modifies-workspace-settings">Selecting a Python interpreter no longer modifies workspace settings</h1>
<p>Previously, selecting or changing a Python interpreter with the Python extension would update a setting called “python.pythonPath” with the path to the interpreter as its value. But because the interpreter path is often very specific to a machine, that behavior was problematic for those who wanted to share their VS Code workspace settings in a GitHub repo, for example, as reported in our <a href="https://github.com/microsoft/vscode-python/issues/2125">issue tracker</a>.</p>
<p>To make the interpreter information system-agnostic, changes to the selected interpreter will no longer cause modifications to your settings.json. The Python extension will keep storing the interpreter information per workspace, but in internal storage. If you want to see the path to the selected interpreter, you can run the “Python: Select Interpreter“ command and check the value of the “current” field. You can also open the Python output panel to retrieve the path.</p>
<p>&nbsp;</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-CurrentFieldInterpreterSelection.png"><img class="aligncenter size-full wp-image-8563" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-CurrentFieldInterpreterSelection.png" alt="Currently selected interpreter field in the interpreters list " width="1157" height="378" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-CurrentFieldInterpreterSelection.png 1157w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-CurrentFieldInterpreterSelection-300x98.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-CurrentFieldInterpreterSelection-1024x335.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-CurrentFieldInterpreterSelection-768x251.png 768w" sizes="(max-width: 1157px) 100vw, 1157px" /></a></p>
<p>If you still want to define an interpreter path to be used by the Python extension by default in your settings.json, you can set the “python.defaultInterpreterPath” instead. When set on the workspace scope, the value of this setting will define which interpreter the Python extension will select when it loads the workspace for the first time (and for the first time only). This setting will <strong>not</strong> be modified automatically, which means that the Python extension will not change its value when a different interpreter is specified in the setting.</p>
<p>You can also set “python.defaultInterpreterPath” on the User scope to define the path to an interpreter that you wish to be selected on the first time you open any workspaces.</p>
<p>If you have the “python.pythonPath” setting defined on your workspace, its value will be used to update the selected interpreter in the internal storage. However, that will happen only on the first time this newest version of the Python extension loads – further changes to this setting will not be picked up.</p>
<h1 id="two-new-debugger-features-step-into-targets-and-function-breakpoints">Two new debugger features: step into targets and function breakpoints</h1>
<p>We’re excited to be introducing a new feature to improve your productivity when debugging your Python code!</p>
<p>The first one is the ability to choose which targets to step into when there is more than one possible option. Take the example code below:</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart1.png"><img class="aligncenter size-full wp-image-8564" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart1.png" alt="Example of code with four function calls in one line." width="1530" height="336" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart1.png 1530w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart1-300x66.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart1-1024x225.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart1-768x169.png 768w" sizes="(max-width: 1530px) 100vw, 1530px" /></a></p>
<p>Before, if all you wanted was to step into the <em>generate_wordcloud </em>call, you would need to step into (and then immediately step out) of the <em>parse_content</em>, <em>Image.open </em>and <em>np.array </em>calls.</p>
<p>Now, when the debugger stops at a breakpoint on a line that has multiple function calls, you can specify which one you want to step into by right-clicking on the editor and selecting “step into targets”:</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart2.png"><img class="aligncenter size-full wp-image-8565" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart2.png" alt="Step into targets option in the context menu" width="893" height="241" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart2.png 893w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart2-300x81.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart2-768x207.png 768w" sizes="(max-width: 893px) 100vw, 893px" /></a></p>
<p>&nbsp;</p>
<p>You can then select which target you would like to step into. In our case, that would be the <em>generate_wordcloud </em>method.</p>
<p>&nbsp;</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart3.png"><img class="aligncenter size-full wp-image-8566" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart3.png" alt="Targets that could be stepped into with the debugger " width="1642" height="675" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart3.png 1642w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart3-300x123.png 300w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart3-1024x421.png 1024w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart3-768x316.png 768w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-StepIntoTargetsPart3-1536x631.png 1536w" sizes="(max-width: 1642px) 100vw, 1642px" /></a></p>
<p>&nbsp;</p>
<p><figure id="attachment_8567" aria-describedby="caption-attachment-8567" style="width: 1918px" class="wp-caption aligncenter"><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-step-into-targets.gif"><img class="wp-image-8567 size-full" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-step-into-targets.gif" alt="Step into targets with the debugger" width="1918" height="1162" /></a><figcaption id="caption-attachment-8567" class="wp-caption-text"><em>Theme: Lucy (https://marketplace.visualstudio.com/items?itemName=juliettepretot.lucy-vscode)</em></figcaption></figure></p>
<p>The other exciting new feature we’re bringing in this release is function breakpoints. If you’re interested in inspecting just a certain function’s behavior, you can specify its name on the breakpoint window so that the debugger will stop its execution once it reaches the function:</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart1.png"><img class="aligncenter wp-image-8569 size-medium" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart1-280x300.png" alt="Adding a function breakpoint" width="280" height="300" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart1-280x300.png 280w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart1-768x823.png 768w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart1.png 823w" sizes="(max-width: 280px) 100vw, 280px" /></a></p>
<p>For example, if we wanted the debugger to stop once the execution reached the <em>parse_content</em> function, we would add its name in the breakpoints window. Function breakpoints are represented by a red triangle, like in the image below:</p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart2.png"><img class="aligncenter wp-image-8570 size-medium" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart2-272x300.png" alt="Function breakpoint on the breakpoints view" width="272" height="300" srcset="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart2-272x300.png 272w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart2-768x846.png 768w, https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-FunctionBreakpointsPart2.png 881w" sizes="(max-width: 272px) 100vw, 272px" /></a></p>
<p><a href="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-function-breakpoints.gif"><img class="aligncenter size-full wp-image-8568" src="https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2021/07/July2021-function-breakpoints.gif" alt="Adding and hitting a function breakpoint" width="1918" height="1162" /></a></p>
<h1 id="other-changes-and-enhancements">Other Changes and Enhancements</h1>
<p>We have also added small enhancements and fixed issues requested by users that should improve your experience working with Python in Visual Studio Code. Some notable changes include:</p>
<ul>
<li>Make test explorer only show file/folder names on nodes. (thanks <a href="https://github.com/bobwalker99">bobwalker99</a>) (<a href="https://github.com/Microsoft/vscode-python/issues/16368">#16368</a>)</li>
<li>Bug fixes for Poetry support: the poetryPath setting will correctly apply system variable substitutions, and the Jupyter Notebook extension will install any missing dependencies using Poetry or Pipenv if those are the selected environments. (thanks <a href="https://github.com/tonybaloney">Anthony Shaw</a>) (<a href="https://github.com/Microsoft/vscode-python/issues/16607">#16607,</a> <a href="https://github.com/Microsoft/vscode-python/issues/16615">#16615</a>)</li>
<li>Add support for renaming modules with Jedi (thanks <a href="https://github.com/anu-ka">Anupama Nadig</a>!) (<a href="https://github.com/pappasam/jedi-language-server/issues/134">jedi-language-server/#134</a>)</li>
</ul>
<p>Be sure to <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">download the Python extension</a> for Visual Studio Code now to try out the above improvements. If you run into any problems or have suggestions, <a href="https://github.com/microsoft/vscode-python/issues/new/choose">please file an issue</a> on the <a href="https://github.com/Microsoft/vscode-python">Python VS Code GitHub</a> page.</p>
<p>The post <a rel="nofollow" href="https://devblogs.microsoft.com/python/python-in-visual-studio-code-july-2021-release/">Python in Visual Studio Code – July 2021 Release</a> appeared first on <a rel="nofollow" href="https://devblogs.microsoft.com/python">Python</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://devblogs.microsoft.com/python/python-in-visual-studio-code-july-2021-release/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
	</channel>
</rss>
